#!/bin/sh

if [ "${SCRIPT_DEBUG}" = "true" ] ; then
    set -x
    echo "Script debugging is enabled, allowing bash commands and their arguments to be printed as they are executed"
fi

. $(dirname $0)/common.sh
. /opt/rh/rh-maven33/enable

LOCAL_SOURCE_DIR=/tmp/src
mkdir -p $LOCAL_SOURCE_DIR

DEPLOY_DIR=$JWS_HOME/webapps

# the subdirectory within LOCAL_SOURCE_DIR from where we should copy build artifacts
ARTIFACT_DIR=${ARTIFACT_DIR:-target}

if [ -f $LOCAL_SOURCE_DIR/configuration/settings.xml ]; then
  echo "Copying maven config file from project..."
  mkdir -p $HOME/.m2
  mv $LOCAL_SOURCE_DIR/configuration/settings.xml $HOME/.m2
fi

configure_proxy
configure_mirrors

manage_incremental_build

# If a pom.xml is present, this is a normal build scenario
# so run maven.
if [ -f "$LOCAL_SOURCE_DIR/pom.xml" ]; then
  pushd $LOCAL_SOURCE_DIR &> /dev/null

  # Add JVM default options
  export MAVEN_OPTS="${MAVEN_OPTS:-$(/opt/run-java/java-default-options)}"
  MAVEN_ARGS="${MAVEN_ARGS--e -Popenshift -DskipTests -Dcom.redhat.xpaas.repo.redhatga package}"

  # Use maven batch mode (CLOUD-579)
  # Always force IPv4 (CLOUD-188)
  # Append user-supplied arguments (CLOUD-412)
  MAVEN_ARGS="$MAVEN_ARGS --batch-mode -Djava.net.preferIPv4Stack=true ${MAVEN_ARGS_APPEND}"

  echo "Found pom.xml... attempting to build with 'mvn ${MAVEN_ARGS}'"
  echo "Using MAVEN_OPTS '${MAVEN_OPTS}'"

  echo "Using $(mvn --version)"

  # Execute the actual build
  mvn $MAVEN_ARGS

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from Maven build"
    exit $ERR
  fi

  # Expand each ARTIFACT_DIR entry to absolute path by prefixing it with $LOCAL_SOURCE_DIR
  IFS=',' read -a artifact_dir_entries <<< "$ARTIFACT_DIR"
  artifact_dir_entries=($(printf "$LOCAL_SOURCE_DIR/%s\n" "${artifact_dir_entries[@]}" | tr '\n' ','))

  # Copy built artifacts (if any!) from the target/ directory
  # to the $DEPLOY_DIR directory for later deployment
  # Use artifact directories in absolute path form when copying artifacts
  copy_artifacts "${artifact_dir_entries[@]}" war

  # optionally clear the local maven repository after the build
  clear_maven_repository

  popd &> /dev/null
else
  copy_artifacts "${LOCAL_SOURCE_DIR}" war
fi

# Copy (probably binary) artifacts from the deployments/
# directory to the $DEPLOY_DIR directory for later deployment
copy_artifacts "$LOCAL_SOURCE_DIR/deployments" war

if [ -d $LOCAL_SOURCE_DIR/lib ]; then
  echo "Copying libs from project..."
  cp -v $LOCAL_SOURCE_DIR/lib/* $JWS_HOME/lib/
fi

if [ -d $LOCAL_SOURCE_DIR/configuration ]; then
  file_count=$(ls -1 $LOCAL_SOURCE_DIR/configuration | wc -l)
  if [ $file_count -gt 0 ]; then
    echo "Copying config files from project..."
    cp -v $LOCAL_SOURCE_DIR/configuration/* $JWS_HOME/conf/
  fi
fi

# Remove java tmp perf data dir owned by 185
rm -rf /tmp/hsperfdata_jboss
